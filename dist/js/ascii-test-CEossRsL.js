import"./modulepreload-polyfill-B5Qt9EMX.js";import{A as r}from"./ascii3d-engine-BXQAj8pL.js";import"./dom-utils-UozHuNU6.js";class c{constructor(){this.engine=null,this.canvas=null,this.stats={fps:0,renderTime:0,memory:0,interactionCount:0,morphProgress:0},this.testModels=["cube","sphere","torus"],this.currentModelIndex=0,this.performanceInterval=null,this.init()}async init(){console.log("🧪 Initializing ASCII 3D Test Suite...");try{if(!this.checkWebGLSupport()){this.showError("WebGL not supported. 3D ASCII engine requires WebGL.");return}if(this.canvas=document.getElementById("ascii3dCanvas"),!this.canvas){this.showError("ASCII 3D canvas not found.");return}this.engine=new r,await this.engine.init(this.canvas),this.startPerformanceMonitoring(),this.setupKeyboardShortcuts(),this.engine.startAnimation(),this.hideLoading(),this.updateEngineStatus("RUNNING"),console.log("✅ ASCII 3D Test Suite initialized successfully")}catch(e){console.error("❌ Test suite initialization failed:",e),this.showError(`Initialization failed: ${e.message}`)}}checkWebGLSupport(){try{const e=document.createElement("canvas");return!!(e.getContext("webgl")||e.getContext("experimental-webgl"))}catch{return!1}}hideLoading(){const e=document.getElementById("loadingIndicator");e&&(e.style.display="none")}showError(e){console.error("🚨",e);const t=document.getElementById("errorMessage"),n=document.getElementById("errorText");t&&n&&(n.textContent=e,t.style.display="block"),this.hideLoading(),this.updateEngineStatus("ERROR")}updateEngineStatus(e){const t=document.getElementById("engineStatus");t&&(t.textContent=e)}startPerformanceMonitoring(){this.performanceInterval=setInterval(()=>{if(this.engine){const e=this.engine.getPerformanceStats();this.stats={...this.stats,...e},this.updatePerformanceDisplay()}},1e3)}updatePerformanceDisplay(){const e={fpsDisplay:Math.round(this.stats.fps),renderTimeDisplay:`${Math.round(this.stats.renderTime)}ms`,memoryDisplay:`${Math.round(this.stats.memory)}MB`,interactionCount:this.stats.interactionCount,morphProgress:`${Math.round(this.stats.morphProgress)}%`};Object.entries(e).forEach(([t,n])=>{const i=document.getElementById(t);i&&(i.textContent=n)})}setupKeyboardShortcuts(){document.addEventListener("keydown",e=>{switch(e.key.toLowerCase()){case"r":e.preventDefault(),this.resetEngine();break;case"m":e.preventDefault(),this.toggleModels();break;case"p":e.preventDefault(),this.cyclePerformanceMode();break;case"s":e.preventDefault(),this.toggleSlowRotation();break;case"i":e.preventDefault(),this.showInteractionInfo();break;case"escape":e.preventDefault(),this.stopAnimation();break}})}async loadModel(e){if(!this.engine){console.warn("Engine not initialized");return}try{console.log(`🎯 Loading test model: ${e}`),await this.engine.loadModel(e),console.log(`✅ Model ${e} loaded successfully`)}catch(t){console.error(`❌ Failed to load model ${e}:`,t),this.showError(`Failed to load model: ${t.message}`)}}changeResolution(e){if(!this.engine)return;const n={high:{width:120,height:60},medium:{width:80,height:40},low:{width:60,height:30}}[e];n&&(console.log(`🔧 Changing ASCII resolution to ${e}:`,n),this.engine.setResolution(n.width,n.height))}changePerformance(e){this.engine&&(console.log(`⚡ Setting performance level to: ${e}`),this.engine.setPerformanceMode(e))}testMorphing(){if(!this.engine)return;console.log("🔄 Testing morphing functionality..."),[{x:400,y:300},{x:500,y:300},{x:600,y:300},{x:500,y:400},{x:400,y:400}].forEach((t,n)=>{setTimeout(()=>{this.engine.updateMousePosition(t.x,t.y),this.engine.simulateInteraction(t.x,t.y)},n*200)})}resetInteractions(){this.engine&&(console.log("🔄 Resetting interactions..."),this.engine.resetInteractions(),this.stats.interactionCount=0,this.stats.morphProgress=0,this.updatePerformanceDisplay())}async resetEngine(){console.log("🔄 Resetting engine..."),this.engine&&(this.engine.stopAnimation(),await this.engine.dispose()),this.engine=new r,await this.engine.init(this.canvas),this.engine.startAnimation(),this.updateEngineStatus("RESET"),console.log("✅ Engine reset complete")}toggleModels(){this.currentModelIndex=(this.currentModelIndex+1)%this.testModels.length;const e=this.testModels[this.currentModelIndex];console.log(`🔄 Toggling to model: ${e}`),this.loadModel(e)}cyclePerformanceMode(){var s;const e=["high","medium","low"],t=((s=this.engine)==null?void 0:s.getPerformanceMode())||"high",i=(e.indexOf(t)+1)%e.length,o=e[i];console.log(`⚡ Cycling performance: ${t} → ${o}`),this.changePerformance(o)}toggleSlowRotation(){if(!this.engine){console.warn("⚠️ Engine not initialized");return}if(typeof this.engine.rotationSpeed<"u"){const t=(this.engine.rotationSpeed||.005)===.005?.001:.005;this.engine.rotationSpeed=t;const n=t===.001?"SLOW":"NORMAL";console.log(`🔄 Rotation speed: ${n} (${t})`);const i=document.getElementById("rotation-status");i&&(i.textContent=`Rotation: ${n}`)}else this.engine.rotationSpeed=.001,console.log("🔄 Slow rotation enabled (0.001)")}showInteractionInfo(){if(!this.engine)return;const e=this.engine.getInteractionData();console.log("📊 Interaction Info:",e),alert(`Interactions: ${e.count}
Crossings: ${e.crossings}
Morph Progress: ${e.morphProgress}%`)}stopAnimation(){this.engine&&(console.log("⏹️ Stopping animation..."),this.engine.stopAnimation(),this.updateEngineStatus("STOPPED"))}destroy(){this.performanceInterval&&clearInterval(this.performanceInterval),this.engine&&(this.engine.stopAnimation(),this.engine.dispose(),this.engine=null),console.log("🧹 Test suite cleaned up")}}const a=new c;window.testEngine=a;window.addEventListener("beforeunload",()=>{a.destroy()});console.log("🧪 ASCII 3D Test Suite loaded");
